console.clear();
require("dotenv").config();
const {
  AccountId,
  TokenCreateTransaction,
  TokenType,
  PrivateKey,
  Client,
  Transaction,
  TransactionId, // <--- New Line
} = require("@hashgraph/sdk");

// Grab the OPERATOR_ID and OPERATOR_KEY from the .env file
const AliceAccountId = AccountId.fromString(process.env.ALICE_OPERATOR_ID);
const AlicePrivateKey = PrivateKey.fromStringED25519(process.env.ALICE_OPERATOR_KEY);

// Build Hedera testnet and mirror node client
const client = Client.forTestnet();
client.setOperator(AliceAccountId, AlicePrivateKey);

async function main() {
  // 1. Import the signed frozen transaction from Bob
  const signedBytes = Buffer.from([10,212,1,42,209,1,10,103,10,25,10,12,8,214,231,176,177,6,16,213,194,186,240,2,18,7,8,0,16,0,24,193,10,24,0,18,6,8,0,16,0,24,6,24,128,188,193,150,11,34,2,8,120,50,0,234,1,53,10,13,78,101,119,32,84,111,107,101,110,32,49,50,51,18,5,78,84,49,50,51,32,208,15,42,7,8,0,16,0,24,170,109,114,7,8,0,16,0,24,170,109,122,5,8,128,206,218,3,136,1,0,18,102,10,100,10,32,42,187,65,194,142,116,35,219,225,154,50,90,118,88,58,122,221,7,208,228,87,165,76,197,215,180,88,192,170,46,227,81,26,64,179,231,144,114,126,192,242,65,237,162,23,128,83,49,249,206,3,57,68,173,103,14,96,117,236,126,147,64,253,94,172,32,71,6,196,4,135,92,66,11,161,202,158,173,208,60,52,131,238,50,157,14,141,174,74,209,136,178,82,210,206,172,103,2,10,212,1,42,209,1,10,103,10,25,10,12,8,214,231,176,177,6,16,213,194,186,240,2,18,7,8,0,16,0,24,193,10,24,0,18,6,8,0,16,0,24,8,24,128,188,193,150,11,34,2,8,120,50,0,234,1,53,10,13,78,101,119,32,84,111,107,101,110,32,49,50,51,18,5,78,84,49,50,51,32,208,15,42,7,8,0,16,0,24,170,109,114,7,8,0,16,0,24,170,109,122,5,8,128,206,218,3,136,1,0,18,102,10,100,10,32,42,187,65,194,142,116,35,219,225,154,50,90,118,88,58,122,221,7,208,228,87,165,76,197,215,180,88,192,170,46,227,81,26,64,62,98,122,30,175,153,160,63,167,81,119,28,225,183,23,125,25,18,196,255,174,232,199,10,95,215,172,120,169,54,128,208,1,184,8,45,36,70,88,60,235,109,115,128,237,39,14,55,110,178,236,130,55,221,125,7,212,126,77,63,141,61,46,3,10,212,1,42,209,1,10,103,10,25,10,12,8,214,231,176,177,6,16,213,194,186,240,2,18,7,8,0,16,0,24,193,10,24,0,18,6,8,0,16,0,24,4,24,128,188,193,150,11,34,2,8,120,50,0,234,1,53,10,13,78,101,119,32,84,111,107,101,110,32,49,50,51,18,5,78,84,49,50,51,32,208,15,42,7,8,0,16,0,24,170,109,114,7,8,0,16,0,24,170,109,122,5,8,128,206,218,3,136,1,0,18,102,10,100,10,32,42,187,65,194,142,116,35,219,225,154,50,90,118,88,58,122,221,7,208,228,87,165,76,197,215,180,88,192,170,46,227,81,26,64,184,220,18,182,173,18,181,253,162,22,38,34,120,226,177,42,216,201,229,148,205,13,219,107,157,33,250,168,110,46,7,227,45,18,108,141,133,18,109,0,27,239,136,103,142,63,42,166,251,27,0,252,87,117,8,176,185,40,58,220,38,70,254,15,10,212,1,42,209,1,10,103,10,25,10,12,8,214,231,176,177,6,16,213,194,186,240,2,18,7,8,0,16,0,24,193,10,24,0,18,6,8,0,16,0,24,5,24,128,188,193,150,11,34,2,8,120,50,0,234,1,53,10,13,78,101,119,32,84,111,107,101,110,32,49,50,51,18,5,78,84,49,50,51,32,208,15,42,7,8,0,16,0,24,170,109,114,7,8,0,16,0,24,170,109,122,5,8,128,206,218,3,136,1,0,18,102,10,100,10,32,42,187,65,194,142,116,35,219,225,154,50,90,118,88,58,122,221,7,208,228,87,165,76,197,215,180,88,192,170,46,227,81,26,64,24,177,52,41,103,82,225,108,147,43,201,192,44,42,240,215,208,59,48,220,44,13,222,101,176,58,111,142,108,102,63,21,227,137,43,120,65,21,203,81,58,231,78,122,253,104,230,59,230,43,247,192,191,210,109,177,129,162,197,101,134,0,14,1,10,212,1,42,209,1,10,103,10,25,10,12,8,214,231,176,177,6,16,213,194,186,240,2,18,7,8,0,16,0,24,193,10,24,0,18,6,8,0,16,0,24,7,24,128,188,193,150,11,34,2,8,120,50,0,234,1,53,10,13,78,101,119,32,84,111,107,101,110,32,49,50,51,18,5,78,84,49,50,51,32,208,15,42,7,8,0,16,0,24,170,109,114,7,8,0,16,0,24,170,109,122,5,8,128,206,218,3,136,1,0,18,102,10,100,10,32,42,187,65,194,142,116,35,219,225,154,50,90,118,88,58,122,221,7,208,228,87,165,76,197,215,180,88,192,170,46,227,81,26,64,197,203,104,173,37,44,128,208,45,189,67,143,109,153,151,153,177,187,255,87,176,255,228,102,140,204,139,199,94,117,20,44,134,178,37,225,66,32,52,22,161,68,52,180,27,141,29,81,38,199,11,171,55,246,247,86,217,246,32,6,83,96,72,2,10,212,1,42,209,1,10,103,10,25,10,12,8,214,231,176,177,6,16,213,194,186,240,2,18,7,8,0,16,0,24,193,10,24,0,18,6,8,0,16,0,24,6,24,128,188,193,150,11,34,2,8,120,50,0,234,1,53,10,13,78,101,119,32,84,111,107,101,110,32,49,50,51,18,5,78,84,49,50,51,32,208,15,42,7,8,0,16,0,24,170,109,114,7,8,0,16,0,24,170,109,122,5,8,128,206,218,3,136,1,0,18,102,10,100,10,32,42,187,65,194,142,116,35,219,225,154,50,90,118,88,58,122,221,7,208,228,87,165,76,197,215,180,88,192,170,46,227,81,26,64,179,231,144,114,126,192,242,65,237,162,23,128,83,49,249,206,3,57,68,173,103,14,96,117,236,126,147,64,253,94,172,32,71,6,196,4,135,92,66,11,161,202,158,173,208,60,52,131,238,50,157,14,141,174,74,209,136,178,82,210,206,172,103,2,10,212,1,42,209,1,10,103,10,25,10,12,8,214,231,176,177,6,16,213,194,186,240,2,18,7,8,0,16,0,24,193,10,24,0,18,6,8,0,16,0,24,7,24,128,188,193,150,11,34,2,8,120,50,0,234,1,53,10,13,78,101,119,32,84,111,107,101,110,32,49,50,51,18,5,78,84,49,50,51,32,208,15,42,7,8,0,16,0,24,170,109,114,7,8,0,16,0,24,170,109,122,5,8,128,206,218,3,136,1,0,18,102,10,100,10,32,42,187,65,194,142,116,35,219,225,154,50,90,118,88,58,122,221,7,208,228,87,165,76,197,215,180,88,192,170,46,227,81,26,64,197,203,104,173,37,44,128,208,45,189,67,143,109,153,151,153,177,187,255,87,176,255,228,102,140,204,139,199,94,117,20,44,134,178,37,225,66,32,52,22,161,68,52,180,27,141,29,81,38,199,11,171,55,246,247,86,217,246,32,6,83,96,72,2]);
 
  // 2. Alice signs the transaction
  const signedTxFromBytes = Transaction.fromBytes(signedBytes);
  const doubleSignedTx = await signedTxFromBytes.sign(AlicePrivateKey);

  // 3. Alice executes the transaction and pays the transaction fees. Note: Alice must submit the transaction with 3min of Bob signing it unless Bob designates a different TX timestamp.
  const txResponse = await doubleSignedTx.execute(client);
  const receipt = await txResponse.getReceipt(client);
  console.log("TransactionId: " + txResponse.transactionId);
  console.log("Transaction status: " + receipt.status.toString());
  console.log("Created tokenId: " + receipt.tokenId);

  process.exit();
}

main();
